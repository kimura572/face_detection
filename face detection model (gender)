{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## labeling train or test_data  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import cv2\n",
    "import shutil\n",
    "import numpy as np\n",
    "from keras.utils import np_utils\n",
    "\n",
    "np.random.seed(10)                                                # 乱数種を固定し、毎回同じ順番でシャッフルされるようにする\n",
    "pan_list = list(np.random.permutation(os.listdir('./men/'))) # pancakesフォルダからファイル名を取得しシャッフルする\n",
    "ram_list = list(np.random.permutation(os.listdir('./women/')))    # ramenフォルダからファイル名を取得しシャッフルする\n",
    "\n",
    "if os.path.exists('./train_data') == 1: # train_dataフォルダが存在=1\n",
    "    shutil.rmtree('./train_data')       # train_dataフォルダを削除\n",
    "    \n",
    "if os.path.exists('./test_data') == 1:  # test_dataフォルダが存在=1\n",
    "    shutil.rmtree('./test_data')        # test_dataフォルダを削除\n",
    "    \n",
    "os.mkdir('train_data') # train_dataフォルダを作成\n",
    "os.mkdir('test_data')  # test_dataフォルダを作成\n",
    "\n",
    "train_len = 3200\n",
    "test_len = 800\n",
    "\n",
    "im_size = 200                                                                # 画像サイズを予め指定する\n",
    "train_data = np.empty((train_len*2,im_size,im_size,3))                             # 訓練データを格納する箱を作る\n",
    "test_data = np.empty((test_len*2,im_size,im_size,3))                              # 検証データを格納する箱を作る\n",
    "train_label = np.concatenate([np.zeros(train_len,int),np.ones(train_len,int)], axis=0)   # 訓練ラベル（0がパンケーキ、1がラーメン)\n",
    "test_label = np.concatenate([np.zeros(test_len,int),np.ones(test_len,int)], axis=0)    # 検証ラベル（0がパンケーキ、1がラーメン)\n",
    "train_label = np_utils.to_categorical(train_label, 2)                        # 訓練ラベルをone-hot表現へ変換\n",
    "test_label = np_utils.to_categorical(test_label, 2)                          # 検証ラベルをone-hot表現へ変換\n",
    "\n",
    "for i in range(train_len):\n",
    "    pan_fname = './men/' + pan_list[i]                                    # パンケーキのファイル名\n",
    "    ram_fname = './women/' + ram_list[i]                                       # ラーメンのファイル名\n",
    "    shutil.copy2(pan_fname, './train_data/' + pan_list[i])                     # train_dataフォルダへパンケーキ画像をコピー(無くても可)\n",
    "    shutil.copy2(ram_fname, './train_data/' + ram_list[i])                     # train_dataフォルダへラーメン画像をコピー(無くても可)\n",
    "    pan_im = cv2.resize(cv2.imread(pan_fname), dsize=(im_size,im_size)) / 255  # パンケーキ画像の読み込み, 224×224にリサイズ、0-1に正規化\n",
    "    ram_im = cv2.resize(cv2.imread(ram_fname), dsize=(im_size,im_size)) / 255  # ラーメン画像の読み込み, 224×224にリサイズ、0-1に正規化\n",
    "    train_data[i,:,:,:] = pan_im[:,:,[2, 1, 0]]                                # cv2.cvtColor(im, cv2.COLOR_BGR2RGB)と同じ処理\n",
    "    train_data[i+train_len,:,:,:] = ram_im[:,:,[2, 1, 0]]\n",
    "    \n",
    "for i in range(test_len):\n",
    "    pan_fname = './men/' + pan_list[i+train_len]\n",
    "    ram_fname = './women/' + ram_list[i+train_len]\n",
    "    shutil.copy2(pan_fname, './test_data/' + pan_list[i+train_len])\n",
    "    shutil.copy2(ram_fname, './test_data/' + ram_list[i+train_len])\n",
    "    pan_im = cv2.resize(cv2.imread(pan_fname), dsize=(im_size,im_size)) / 255\n",
    "    ram_im = cv2.resize(cv2.imread(ram_fname), dsize=(im_size,im_size)) / 255\n",
    "    test_data[i,:,:,:] = pan_im[:,:,[2, 1, 0]]\n",
    "    test_data[i+test_len,:,:,:] = ram_im[:,:,[2, 1, 0]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## create model (fine-tuning VGG16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_1 (InputLayer)         (None, 200, 200, 3)       0         \n",
      "_________________________________________________________________\n",
      "block1_conv1 (Conv2D)        (None, 200, 200, 64)      1792      \n",
      "_________________________________________________________________\n",
      "block1_conv2 (Conv2D)        (None, 200, 200, 64)      36928     \n",
      "_________________________________________________________________\n",
      "block1_pool (MaxPooling2D)   (None, 100, 100, 64)      0         \n",
      "_________________________________________________________________\n",
      "block2_conv1 (Conv2D)        (None, 100, 100, 128)     73856     \n",
      "_________________________________________________________________\n",
      "block2_conv2 (Conv2D)        (None, 100, 100, 128)     147584    \n",
      "_________________________________________________________________\n",
      "block2_pool (MaxPooling2D)   (None, 50, 50, 128)       0         \n",
      "_________________________________________________________________\n",
      "block3_conv1 (Conv2D)        (None, 50, 50, 256)       295168    \n",
      "_________________________________________________________________\n",
      "block3_conv2 (Conv2D)        (None, 50, 50, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_conv3 (Conv2D)        (None, 50, 50, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_pool (MaxPooling2D)   (None, 25, 25, 256)       0         \n",
      "_________________________________________________________________\n",
      "block4_conv1 (Conv2D)        (None, 25, 25, 512)       1180160   \n",
      "_________________________________________________________________\n",
      "block4_conv2 (Conv2D)        (None, 25, 25, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block4_conv3 (Conv2D)        (None, 25, 25, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block4_pool (MaxPooling2D)   (None, 12, 12, 512)       0         \n",
      "_________________________________________________________________\n",
      "block5_conv1 (Conv2D)        (None, 12, 12, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv2 (Conv2D)        (None, 12, 12, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv3 (Conv2D)        (None, 12, 12, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block5_pool (MaxPooling2D)   (None, 6, 6, 512)         0         \n",
      "_________________________________________________________________\n",
      "sequential_1 (Sequential)    (None, 2)                 4752002   \n",
      "=================================================================\n",
      "Total params: 19,466,690\n",
      "Trainable params: 7,111,810\n",
      "Non-trainable params: 12,354,880\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from keras.applications.vgg16 import VGG16                   # 学習済モデルとしてvgg16を指定(詳しくは: https://keras.io/ja/applications/)\n",
    "from keras.models import Sequential, Model\n",
    "from keras.layers import Dense, Dropout,Flatten, Activation\n",
    "from keras.optimizers import Adam\n",
    "from keras.backend import tensorflow_backend as backend\n",
    "\n",
    "backend.clear_session()                      # モデルの初期化\n",
    "DL_model = VGG16(include_top=False,          # ネットワークの出力層側にある3つの全結合層を含むかどうか\n",
    "                 weights='imagenet',         # None (ランダム初期化) か 'imagenet' (ImageNetで学習した重み) のどちらか\n",
    "                 input_shape=(200,200,3),    # 3つの入力チャンネルをもつ必要，widthとheightは48以上にする必要\n",
    "                 pooling=None                # 学習済モデル最後の出力をグローバルプーリングするかどうか(None or 'avg' or 'max')\n",
    "                )\n",
    "top_model = Sequential()                                        # 学習済モデルの後ろにくっつける部分の定義\n",
    "top_model.add(Flatten(input_shape=DL_model.output_shape[1:]))\n",
    "top_model.add(Dropout(0.5))\n",
    "top_model.add(Dense(256))\n",
    "top_model.add(Activation('relu'))\n",
    "top_model.add(Dropout(0.5))\n",
    "top_model.add(Dense(128))\n",
    "top_model.add(Activation('relu'))\n",
    "top_model.add(Dense(train_label.shape[1]))\n",
    "top_model.add(Activation('softmax'))\n",
    "\n",
    "fine_model = Model(inputs=DL_model.input, outputs=top_model(DL_model.output)) # 学習済モデルと新しく追加した部分の連結\n",
    "\n",
    "layer_num = len(DL_model.layers)               # 学習済モデルのトータルの層数\n",
    "for layer in fine_model.layers[:layer_num-2]:  # 学習済モデルの最後の2層(畳み込み層とプーリング層)以外を訓練不可にする=凍結\n",
    "    layer.trainable = False\n",
    "\n",
    "fine_model.compile(loss='categorical_crossentropy', optimizer=Adam(), metrics=['acc']) #adamの初期学習率は0.01\n",
    "fine_model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 6400 samples, validate on 1600 samples\n",
      "Epoch 1/30\n",
      "6400/6400 [==============================] - 2087s 326ms/step - loss: 1.0783 - acc: 0.5166 - val_loss: 0.6727 - val_acc: 0.5656\n",
      "\n",
      "Epoch 00001: saving model to ./weight/weights.01-0.67.hdf5\n",
      "Epoch 2/30\n",
      "6400/6400 [==============================] - 2122s 332ms/step - loss: 0.5943 - acc: 0.6736 - val_loss: 0.4874 - val_acc: 0.7575\n",
      "\n",
      "Epoch 00002: saving model to ./weight/weights.02-0.49.hdf5\n",
      "Epoch 3/30\n",
      "6400/6400 [==============================] - 1983s 310ms/step - loss: 0.4744 - acc: 0.7716 - val_loss: 0.4241 - val_acc: 0.7962\n",
      "\n",
      "Epoch 00003: saving model to ./weight/weights.03-0.42.hdf5\n",
      "Epoch 4/30\n",
      "6400/6400 [==============================] - 2031s 317ms/step - loss: 0.3992 - acc: 0.8167 - val_loss: 0.3849 - val_acc: 0.8181\n",
      "\n",
      "Epoch 00004: saving model to ./weight/weights.04-0.38.hdf5\n",
      "Epoch 5/30\n",
      "6400/6400 [==============================] - 2094s 327ms/step - loss: 0.3554 - acc: 0.8363 - val_loss: 0.3594 - val_acc: 0.8294\n",
      "\n",
      "Epoch 00005: saving model to ./weight/weights.05-0.36.hdf5\n",
      "Epoch 6/30\n",
      "6400/6400 [==============================] - 2058s 322ms/step - loss: 0.3147 - acc: 0.8614 - val_loss: 0.3487 - val_acc: 0.8431\n",
      "\n",
      "Epoch 00006: saving model to ./weight/weights.06-0.35.hdf5\n",
      "Epoch 7/30\n",
      "6400/6400 [==============================] - 1969s 308ms/step - loss: 0.2914 - acc: 0.8717 - val_loss: 0.3505 - val_acc: 0.8381\n",
      "\n",
      "Epoch 00007: saving model to ./weight/weights.07-0.35.hdf5\n",
      "Epoch 8/30\n",
      "6400/6400 [==============================] - 2002s 313ms/step - loss: 0.2515 - acc: 0.8888 - val_loss: 0.3404 - val_acc: 0.8481\n",
      "\n",
      "Epoch 00008: saving model to ./weight/weights.08-0.34.hdf5\n",
      "Epoch 9/30\n",
      "6400/6400 [==============================] - 1993s 311ms/step - loss: 0.2377 - acc: 0.8964 - val_loss: 0.3623 - val_acc: 0.8344\n",
      "\n",
      "Epoch 00009: saving model to ./weight/weights.09-0.36.hdf5\n",
      "Epoch 10/30\n",
      "6400/6400 [==============================] - 2000s 313ms/step - loss: 0.2143 - acc: 0.9127 - val_loss: 0.3522 - val_acc: 0.8487\n",
      "\n",
      "Epoch 00010: saving model to ./weight/weights.10-0.35.hdf5\n",
      "Epoch 11/30\n",
      "6400/6400 [==============================] - 1931s 302ms/step - loss: 0.1891 - acc: 0.9222 - val_loss: 0.3985 - val_acc: 0.8431\n",
      "\n",
      "Epoch 00011: saving model to ./weight/weights.11-0.40.hdf5\n",
      "Epoch 12/30\n",
      "6400/6400 [==============================] - 1936s 303ms/step - loss: 0.1952 - acc: 0.9181 - val_loss: 0.3746 - val_acc: 0.8475\n",
      "\n",
      "Epoch 00012: saving model to ./weight/weights.12-0.37.hdf5\n",
      "Epoch 13/30\n",
      "6400/6400 [==============================] - 1937s 303ms/step - loss: 0.1652 - acc: 0.9355 - val_loss: 0.3963 - val_acc: 0.8413\n",
      "\n",
      "Epoch 00013: saving model to ./weight/weights.13-0.40.hdf5\n",
      "Epoch 14/30\n",
      "6400/6400 [==============================] - 1883s 294ms/step - loss: 0.1517 - acc: 0.9384 - val_loss: 0.4200 - val_acc: 0.8338\n",
      "\n",
      "Epoch 00014: saving model to ./weight/weights.14-0.42.hdf5\n",
      "Epoch 15/30\n",
      "6400/6400 [==============================] - 2035s 318ms/step - loss: 0.1452 - acc: 0.9430 - val_loss: 0.4358 - val_acc: 0.8525\n",
      "\n",
      "Epoch 00015: saving model to ./weight/weights.15-0.44.hdf5\n",
      "Epoch 16/30\n",
      "6400/6400 [==============================] - 2205s 345ms/step - loss: 0.1218 - acc: 0.9506 - val_loss: 0.4604 - val_acc: 0.8338\n",
      "Restoring model weights from the end of the best epoch\n",
      "\n",
      "Epoch 00016: saving model to ./weight/weights.16-0.46.hdf5\n",
      "Epoch 00016: early stopping\n",
      "Best model: epoch=8 & val_acc: 0.85\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from keras.callbacks import EarlyStopping\n",
    "from keras.callbacks import ModelCheckpoint\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "baseSaveDir = './weight/'\n",
    "if not os.path.isdir(baseSaveDir):\n",
    "    os.mkdir(baseSaveDir)\n",
    "cb_1 = EarlyStopping(monitor='val_loss',     # testデータの損失が減らなくなった時に処理を中断する(Early Stopping)\n",
    "                   min_delta=0.01,           # 10epoch経過しても0.01の差も改善しなくなった瞬間に中断\n",
    "                   patience=10,\n",
    "                   verbose=1,                # Early Stopping時に表示\n",
    "                   mode='auto',\n",
    "                   restore_best_weights=True # 最も良かった時の重みをmodelの持つ重みとする\n",
    "                   )\n",
    "\n",
    "chkpt = os.path.join(baseSaveDir, 'weights.{epoch:02d}-{val_loss:.2f}.hdf5')\n",
    "cb_2 = ModelCheckpoint(filepath=chkpt,\n",
    "                       monitor='val_loss',\n",
    "                       verbose=1,\n",
    "                       save_best_only=False,\n",
    "                       save_weights_only=False, \n",
    "                       mode='auto',\n",
    "                       period=1\n",
    "                      )\n",
    "\n",
    "history = fine_model.fit(x = train_data,                            # 訓練データ\n",
    "                         y = train_label,                           # 訓練ラベル\n",
    "                         validation_data = [test_data, test_label], # 検証用データ&ラベル\n",
    "                         batch_size = 512,                          # 一度に処理する枚数(重みの更新を行う枚数)\n",
    "                         epochs = 30,                               # 最大何エポックまで学習するか\n",
    "                         callbacks = [cb_1, cb_2],                          # (今回は) Early Stoppingの呼び出し\n",
    "                         verbose = 1,                               # 学習の過程を表示=1\n",
    "                         shuffle = True                             # 学習データをシャッフルする\n",
    "                         )\n",
    "test_predict = fine_model.predict(test_data)\n",
    "loss = history.history['loss']                                      # 各エポックごとの訓練損失\n",
    "accuracy = history.history['acc']                                        # 各エポックごとの訓練正解率\n",
    "val_loss = history.history['val_loss']                              # 各エポックごとの検証損失\n",
    "val_accuracy = history.history['val_acc']                                # 各エポックごとの検証正解率\n",
    "Epoch = len(history.history['val_loss'])                            # 学習したエポック数\n",
    "plt.figure(figsize=(11, 5))\n",
    "plt.subplot(1,2,1)\n",
    "plt.plot(np.arange(1, Epoch+1, 1), loss, linestyle = ':', color = 'black', label='train_loss') # 訓練損失のグラフ\n",
    "plt.plot(np.arange(1, Epoch+1, 1), val_loss, linestyle = '-', color = 'red', label='val_loss') # 検証損失のグラフ\n",
    "plt.xlabel('epoch')\n",
    "plt.ylabel('loss')\n",
    "plt.legend()                      # 凡例\n",
    "plt.xlim([1, Epoch + 1])          # x軸の表示範囲\n",
    "xtick = np.arange(0, Epoch+1, 5)  # x軸の目盛り(5間隔)\n",
    "xtick[0] = 1                      # x軸の目盛りの初期値を0→1に変更\n",
    "plt.xticks(xtick)                 # x軸の目盛りを設定\n",
    "plt.subplot(1,2,2)\n",
    "plt.plot(np.arange(1, Epoch+1, 1), accuracy, linestyle = ':', color = 'black', label='train_accuracy') # 訓練正解率のグラフ\n",
    "plt.plot(np.arange(1, Epoch+1, 1), val_accuracy, linestyle = '-', color = 'red', label='val_accuracy') # 検証正解率のグラフ\n",
    "plt.xlabel('epoch')\n",
    "plt.ylabel('accuracy')\n",
    "plt.legend()\n",
    "plt.xlim([1, Epoch + 1])\n",
    "xtick = np.arange(0, Epoch+1, 5)\n",
    "xtick[0] = 1   \n",
    "plt.xticks(xtick)\n",
    "\n",
    "best_ep = np.argmin(np.array(val_loss), axis=0)                        # 検証損失が最小の時のepoch\n",
    "best_accuracy = np.round(np.array(val_accuracy)[best_ep], decimals=2)  # そのときの正解率\n",
    "\n",
    "print('Best model: epoch=' + str(best_ep+1) + ' & val_acc: ' + str(best_accuracy) + '\\n')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (restart trainig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# from tensorflow.python.keras.models import load_model\n",
    "# from keras.callbacks import EarlyStopping\n",
    "# from keras.callbacks import ModelCheckpoint\n",
    "# import matplotlib.pyplot as plt\n",
    "\n",
    "# fin_model.load_weights('./weight/weights.16-0.65.hdf5')\n",
    "# baseSaveDir = './weight/'\n",
    "\n",
    "# cb_1 = EarlyStopping(monitor='val_loss',     # testデータの損失が減らなくなった時に処理を中断する(Early Stopping)\n",
    "#                    min_delta=0.01,           # 10epoch経過しても0.01の差も改善しなくなった瞬間に中断\n",
    "#                    patience=10,\n",
    "#                    verbose=1,                # Early Stopping時に表示\n",
    "#                    mode='auto',\n",
    "#                    restore_best_weights=True # 最も良かった時の重みをmodelの持つ重みとする\n",
    "#                    )\n",
    "\n",
    "# chkpt = os.path.join(baseSaveDir, 'weights.{epoch:02d}-{val_loss:.2f}.hdf5')\n",
    "# cb_2 = ModelCheckpoint(filepath=chkpt,\n",
    "#                        monitor='val_loss',\n",
    "#                        verbose=1,\n",
    "#                        save_best_only=False,\n",
    "#                        save_weights_only=False, \n",
    "#                        mode='auto',\n",
    "#                        period=1\n",
    "#                       )\n",
    "# history = fin_model.fit(x = train_data,\n",
    "#                     y = train_label,\n",
    "#                     validation_data = [test_data, test_label],\n",
    "#                     batch_size = 512,\n",
    "#                     epochs = 14,\n",
    "#                     callbacks = [cb_1, cb_2],\n",
    "#                     verbose = 1\n",
    "#                    )\n",
    "\n",
    "# loss = history.history['loss']                                      # 各エポックごとの訓練損失\n",
    "# accuracy = history.history['acc']                                        # 各エポックごとの訓練正解率\n",
    "# val_loss = history.history['val_loss']                              # 各エポックごとの検証損失\n",
    "# val_accuracy = history.history['val_acc']                                # 各エポックごとの検証正解率\n",
    "# Epoch = len(history.history['val_loss'])                            # 学習したエポック数\n",
    "# plt.figure(figsize=(11, 5))\n",
    "# plt.subplot(1,2,1)\n",
    "# plt.plot(np.arange(1, Epoch+1, 1), loss, linestyle = ':', color = 'black', label='train_loss') # 訓練損失のグラフ\n",
    "# plt.plot(np.arange(1, Epoch+1, 1), val_loss, linestyle = '-', color = 'red', label='val_loss') # 検証損失のグラフ\n",
    "# plt.xlabel('epoch')\n",
    "# plt.ylabel('loss')\n",
    "# plt.legend()                      # 凡例\n",
    "# plt.xlim([1, Epoch + 1])          # x軸の表示範囲\n",
    "# xtick = np.arange(0, Epoch+1, 5)  # x軸の目盛り(5間隔)\n",
    "# xtick[0] = 1                      # x軸の目盛りの初期値を0→1に変更\n",
    "# plt.xticks(xtick)                 # x軸の目盛りを設定\n",
    "# plt.subplot(1,2,2)\n",
    "# plt.plot(np.arange(1, Epoch+1, 1), accuracy, linestyle = ':', color = 'black', label='train_accuracy') # 訓練正解率のグラフ\n",
    "# plt.plot(np.arange(1, Epoch+1, 1), val_accuracy, linestyle = '-', color = 'red', label='val_accuracy') # 検証正解率のグラフ\n",
    "# plt.xlabel('epoch')\n",
    "# plt.ylabel('accuracy')\n",
    "# plt.legend()\n",
    "# plt.xlim([1, Epoch + 1])\n",
    "# xtick = np.arange(0, Epoch+1, 5)\n",
    "# xtick[0] = 1   \n",
    "# plt.xticks(xtick)\n",
    "\n",
    "# best_ep = np.argmin(np.array(val_loss), axis=0)                        # 検証損失が最小の時のepoch\n",
    "# best_accuracy = np.round(np.array(val_accuracy)[best_ep], decimals=2)  # そのときの正解率\n",
    "\n",
    "# print('Best model: epoch=' + str(best_ep+1) + ' & val_acc: ' + str(best_accuracy) + '\\n')\n",
    "# plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
